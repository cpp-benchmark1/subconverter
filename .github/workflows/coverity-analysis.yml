name: Coverity Scan
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      languages:
        description: "Languages to analyze"
        required: true
        default: "c-cpp"
jobs:
  coverity:
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual
    container:
      image: alpine
      volumes:
        - /:/host
    steps:
      - name: Installing dependencies
        shell: sh
        run: |
          apk add bash git nodejs npm gcompat gcc libstdc++ 
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Download and Install Coverity Tool
        shell: sh
        run: |
          wget https://scan.coverity.com/download/linux64 \
            --post-data "token=${{ secrets.COVERITY_TOKEN }}&project=${{ github.repository }}" \
            -O coverity_tool.tgz
          mkdir coverity_tool
          tar -xvzf coverity_tool.tgz
          export PATH=$PWD/cov-analysis-linux64-2024.6.1/bin:$PATH
          echo "Coverity Tool installed successfully"
      - name: Build with Coverity
        shell: sh
        run: |
          export GLIBC_VER="2.35-r1"
          export ALPINE_GLIBC_REPO="https://github.com/sgerrand/alpine-pkg-glibc/releases/download"
          export SGERRAND_RSA_SHA256="823b54589c93b02497f1ba4dc622eaef9c813e6b0f0ebbb2f771e32adf9f4ef2"
          apk add --no-cache --virtual .build-deps curl binutils zstd gcompat && \
            curl -LfsS https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub && \
            echo "${SGERRAND_RSA_SHA256} */etc/apk/keys/sgerrand.rsa.pub" | sha256sum -c - && \
            curl -LfsS ${ALPINE_GLIBC_REPO}/${GLIBC_VER}/glibc-${GLIBC_VER}.apk > /tmp/glibc-${GLIBC_VER}.apk && \
            apk add --force-overwrite --no-cache /tmp/glibc-${GLIBC_VER}.apk && \
            apk del gcompat && \
            curl -LfsS ${ALPINE_GLIBC_REPO}/${GLIBC_VER}/glibc-bin-${GLIBC_VER}.apk > /tmp/glibc-bin-${GLIBC_VER}.apk && \
            apk add --no-cache /tmp/glibc-bin-${GLIBC_VER}.apk && \
            curl -Ls ${ALPINE_GLIBC_REPO}/${GLIBC_VER}/glibc-i18n-${GLIBC_VER}.apk > /tmp/glibc-i18n-${GLIBC_VER}.apk && \
            apk add --no-cache /tmp/glibc-i18n-${GLIBC_VER}.apk
          chmod +x scripts/build.alpine.release.sh
          ./cov-analysis-linux64-2024.6.1/bin/cov-build --dir cov-int ./scripts/build.alpine.release.sh || echo 'Errors during build with Coverity'
      - name: Compress with bzip2
        shell: sh
        run: |
          tar cjvf myproject.tar.bz2 cov-int
        id: compress
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "coverity-scan-${{ github.run_id }}"
          release_name: "Coverity Scan Results"
          body: "Automated Coverity Scan Results"
          draft: false
          prerelease: false
      - name: Upload Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: myproject.tar.bz2
          asset_name: myproject.tar.bz2
          asset_content_type: application/x-bzip2
      - name: Notify Coverity Scan
        run: |
          curl --data "project=${{ github.repository }}&token=${{ secrets.COVERITY_TOKEN }}&email=cpp.benchmark@proton.me&url=https://github.com/${{ github.repository }}/releases/download/coverity-scan-${{ github.run_id }}/myproject.tar.bz2&version=1.0&description=Automated+Coverity+Scan" https://scan.coverity.com/builds
