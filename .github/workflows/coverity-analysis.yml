name: Coverity Scan
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      languages:
        description: "Languages to analyze"
        required: true
        default: "c-cpp"
jobs:
  coverity:
    runs-on: windows-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Download and Install Coverity Tool
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://scan.coverity.com/download/win64" -Method Post -Body "token=${{ secrets.COVERITY_TOKEN }}&project=${{ github.repository }}" -OutFile "coverity_tool.zip"
          New-Item -ItemType Directory -Path "coverity_tool" -Force | Out-Null
          Expand-Archive coverity_tool.zip -DestinationPath coverity_tool -Force
          $Env:PATH = "$PWD\coverity_tool\bin;$Env:PATH"
          Write-Output "Coverity Tool installed successfully"
          New-Item -ItemType Directory -Path "cov-int" -Force | Out-Null
          Get-ChildItem -Recurse coverity_tool
      - name: Build with Coverity
        shell: powershell
        run: |
          vcpkg.exe install --triplet x64-windows pkgconf curl
          $covFolder = Get-ChildItem -Path coverity_tool -Directory | Where-Object { $_.Name -like 'cov-analysis-win64*' } | Select-Object -First 1
          if (-not $covFolder) {
            Write-Error "NÃ£o foi encontrada a pasta cov-analysis-win64 dentro de coverity_tool"
            exit 1
          }
          $covPath = Join-Path $covFolder.FullName "bin\cov-build.exe"
          Write-Host "Usando Coverity em: $covPath"
          & $covPath --dir cov-int cmd /c "scripts\build.windows.release.bat"
      - name: Compress with bzip2
        shell: powershell
        run: |
          Compress-Archive -Path cov-int -DestinationPath myproject.zip
        id: compress
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "coverity-scan-${{ github.run_id }}"
          release_name: "Coverity Scan Results"
          body: "Automated Coverity Scan Results"
          draft: false
          prerelease: false
      - name: Upload Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: myproject.zip
          asset_name: myproject.zip
          asset_content_type: application/x-bzip2
      - name: Notify Coverity Scan
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://scan.coverity.com/builds" -Method Post -Body @{
            project     = "${{ github.repository }}"
            token       = "${{ secrets.COVERITY_TOKEN }}"
            email       = "cpp.benchmark@proton.me"
            url         = "https://github.com/${{ github.repository }}/releases/download/coverity-scan-${{ github.run_id }}/myproject.zip"
            version     = "1.0"
            description = "Automated Coverity Scan"
          }
