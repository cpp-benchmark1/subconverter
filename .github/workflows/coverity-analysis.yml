name: Coverity Scan
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      languages:
        description: "Languages to analyze"
        required: true
        default: "c-cpp"

jobs:
  coverity:
    runs-on: windows-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Download and Install Coverity Tool
        shell: powershell
        run: |
          $zipPath = "coverity_tool.zip"
          $form = @{
            token = "${{ secrets.COVERITY_TOKEN }}"
            project = "${{ github.repository }}"
          }
          $headers = @{
            "User-Agent" = "GitHubActions-Coverity"
          }

          Write-Output "‚¨áÔ∏è Downloading Coverity tool..."
          try {
            Invoke-WebRequest -Uri "https://scan.coverity.com/download/win64" `
              -Method Post `
              -Headers $headers `
              -ContentType "application/x-www-form-urlencoded" `
              -Body $form `
              -OutFile $zipPath -UseBasicParsing
          } catch {
            Write-Error "‚ùå Failed to download Coverity tool: $($_.Exception.Message)"
            exit 1
          }

          if (-not (Test-Path $zipPath)) {
            Write-Error "‚ùå Coverity zip not found after download!"
            exit 1
          }

          New-Item -ItemType Directory -Path "coverity_tool" -Force | Out-Null
          Expand-Archive $zipPath -DestinationPath "coverity_tool" -Force
          $Env:PATH = "$PWD\coverity_tool\bin;$Env:PATH"
          New-Item -ItemType Directory -Path "cov-int" -Force | Out-Null
          Write-Output "‚úÖ Coverity Tool installed successfully"
          Get-ChildItem -Recurse coverity_tool

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: base-devel git mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-pcre2 mingw-w64-x86_64-libxml2 patch python
          path-type: inherit

      - name: Build with Coverity
        shell: msys2 {0}
        run: |
          covFolder=$(find coverity_tool -type d -name 'cov-analysis-win64*' | head -n1)
          if [ -z "$covFolder" ]; then
            echo "‚ùå Could not find the cov-analysis-win64 folder inside coverity_tool"
            exit 1
          fi
          covPath="$covFolder/bin/cov-build.exe"
          echo "‚úÖ Using Coverity at: $covPath"
          SHA=$(git rev-parse --short HEAD)
          sed -i 's/\(v[0-9]\.[0-9]\.[0-9]\)/\1-'"$SHA"'/' src/version.h
          echo "Listing structure under coverity_tool (max 3 levels):"
          find coverity_tool -type d -maxdepth 3 || true
          echo "Listing top-level directories:"
          ls -1 || true

          # Generate compile_commands.json first
          echo "üîß Generating compile_commands.json..."
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G "Unix Makefiles" ..
          cd ..
          echo "‚úÖ compile_commands.json generated"

          # Run Coverity build analysis
          echo "üîç Running Coverity analysis..."
          "$covPath" --dir cov-int bash -lc "./scripts/build.windows.release.sh VERBOSE=1"

          # Copy compile_commands.json to root directory
          echo "üìã Copying compile_commands.json to root..."
          cp build/compile_commands.json . || echo "‚ö†Ô∏è Warning: compile_commands.json not found in build directory"
          echo "‚úÖ compile_commands.json copied to root"

          # Generate cli-diagnostics.json using our script
          echo "üìã Generating cli-diagnostics.json..."
          bash scripts/generate-coverity-diagnostics.sh || echo "‚ö†Ô∏è Warning: Failed to generate cli-diagnostics.json with script"

          # Copy cli-diagnostics.json if it exists (either from Coverity or our script)
          if [ -f "cov-int/output/cli-diagnostics.json" ]; then
            echo "üìã Copying cli-diagnostics.json to root..."
            cp cov-int/output/cli-diagnostics.json . || echo "‚ö†Ô∏è Warning: cli-diagnostics.json not found"
            echo "‚úÖ cli-diagnostics.json copied to root"
          elif [ -f "cli-diagnostics.json" ]; then
            echo "‚úÖ cli-diagnostics.json already available in root directory"
          else
            echo "‚ö†Ô∏è Warning: cli-diagnostics.json not found in either location"
          fi
      - name: Verify Coverity output
        shell: msys2 {0}
        run: |
          echo "üîç Verifying generated files..."

          # Check compile_commands.json
          if [ -f "compile_commands.json" ]; then
            echo "‚úÖ compile_commands.json found in root directory"
            echo "üìä compile_commands.json size: $(stat --format=%s compile_commands.json) bytes"
          else
            echo "‚ùå compile_commands.json not found in root directory!"
            exit 1
          fi

          # Check cli-diagnostics.json
          if [ -f "cli-diagnostics.json" ]; then
            echo "‚úÖ cli-diagnostics.json found in root directory"
            echo "üìä cli-diagnostics.json size: $(stat --format=%s cli-diagnostics.json) bytes"
          elif [ -f "cov-int/output/cli-diagnostics.json" ]; then
            echo "‚úÖ cli-diagnostics.json found in cov-int/output/"
          else
            echo "‚ùå cli-diagnostics.json not found!"
            echo "Listing cov-int contents:"
            ls -R cov-int || true
            exit 1
          fi

          # Check other Coverity outputs
          if [ -f "cov-int/build-log.txt" ]; then
            echo "‚úÖ build-log.txt found"
          else
            echo "‚ùå build-log.txt not found!"
            exit 1
          fi

          echo "üéâ All required files generated successfully!"
      - name: Compress Results
        shell: powershell
        run: |
          # Create a temporary directory for all artifacts
          New-Item -ItemType Directory -Path "artifacts" -Force | Out-Null
          Copy-Item -Path "cov-int" -Destination "artifacts" -Recurse -Force
          if (Test-Path "compile_commands.json") {
            Copy-Item -Path "compile_commands.json" -Destination "artifacts" -Force
          }
          if (Test-Path "cli-diagnostics.json") {
            Copy-Item -Path "cli-diagnostics.json" -Destination "artifacts" -Force
          }
          Compress-Archive -Path artifacts -DestinationPath myproject.zip
          Write-Output "üì¶ Artifacts compressed successfully"
          Remove-Item -Path "artifacts" -Recurse -Force
        id: compress

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "coverity-scan-${{ github.run_id }}"
          release_name: "Coverity Scan Results"
          body: "Automated Coverity Scan Results"
          draft: false
          prerelease: false

      - name: Upload Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: myproject.zip
          asset_name: myproject.zip
          asset_content_type: application/x-bzip2

      - name: Notify Coverity Scan
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://scan.coverity.com/builds" -Method Post -Body @{
            project     = "${{ github.repository }}"
            token       = "${{ secrets.COVERITY_TOKEN }}"
            email       = "cpp.benchmark@proton.me"
            url         = "https://github.com/${{ github.repository }}/releases/download/coverity-scan-${{ github.run_id }}/myproject.zip"
            version     = "1.0"
            description = "Automated Coverity Scan"
          }