name: Coverity Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  coverity:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libcurl4-openssl-dev \
          rapidjson-dev \
          libyaml-cpp-dev \
          libpcre2-dev \
          libxml2-dev \
          libyaml-dev \
          zlib1g-dev

    - name: Install toml11
      run: |
        git clone https://github.com/ToruNiina/toml11.git
        cd toml11
        mkdir build && cd build
        cmake ..
        sudo make install

    - name: Install QuickJS
      run: |
        git clone https://github.com/bellard/quickjs.git
        cd quickjs
        make
        sudo make install
        sudo ldconfig

    - name: Download Coverity Build Tool
      run: |
        wget -q https://scan.coverity.com/download/linux64 \
          --post-data "token=${{ secrets.COVERITY_TOKEN }}&project=${{ secrets.COVERITY_SCAN_PROJECT_NAME }}" \
          -O coverity_tool.tgz
        mkdir cov-analysis-linux64
        tar xzf coverity_tool.tgz --strip 1 -C cov-analysis-linux64

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        # Allow LibCron to be optional in your CMakeLists.txt
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DFIND_LIBCRON_OPTIONAL=ON \
              ..

    - name: Build with Coverity
      run: |
        export PATH=`pwd`/cov-analysis-linux64/bin:$PATH
        cd build
        rm -rf cov-int
        mkdir -p cov-int

        # Run build with cov-build allowing errors
        cov-build --dir cov-int --allow-missing-targets make -j$(nproc) 2>&1 | tee build-log.txt
        build_status=${PIPESTATUS[0]}
        if [ $build_status -ne 0 ]; then
          echo "Build completed with errors, continuing with Coverity analysis."
        else
          echo "Build completed successfully."
        fi

        # Calculate approximate build completion percentage
        total_targets=$(grep -c "Building CXX object" build-log.txt || echo 0)
        succeeded_targets=$(grep -c "Built target" build-log.txt || echo 0)
        if [ $total_targets -gt 0 ]; then
          pct=$(( succeeded_targets * 100 / total_targets ))
          echo "Build completion: $pct% ($succeeded_targets/$total_targets targets)"
        fi

    - name: Submit to Coverity Scan
      run: |
        cd build
        tar czvf subconverter.tgz cov-int
        curl --form token=${{ secrets.COVERITY_TOKEN }} \
          --form email=${{ secrets.COVERITY_SCAN_EMAIL }} \
          --form file=@subconverter.tgz \
          --form version="${GITHUB_SHA}" \
          --form description="Automated Coverity Scan build" \
          https://scan.coverity.com/builds?project=${{ secrets.COVERITY_SCAN_PROJECT_NAME }}

    - name: Upload Coverity Results (artifact)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverity-results
        path: build/cov-int/
        retention-days: 7
