name: Coverity Scan
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  coverity:
    runs-on: windows-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: base-devel git mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-pcre2 mingw-w64-x86_64-libxml2 patch
          path-type: inherit

      - name: Download Coverity Tool
        shell: bash
        run: |
          curl -X POST "https://scan.coverity.com/download/linux64" \
            -d "token=${{ secrets.COVERITY_TOKEN }}&project=${{ github.repository }}" \
            -o coverity_tool.tgz
          mkdir -p coverity_tool
          tar -xvzf coverity_tool.tgz -C coverity_tool --strip-components=1
          export PATH="$PWD/coverity_tool/bin:$PATH"
          echo "Coverity Tool installed"

      - name: Build with Coverity
        shell: msys2 {0}
        run: |
          COV_DIR="$(pwd)/cov-int"
          rm -rf "$COV_DIR"
          mkdir -p "$COV_DIR"

          covFolder=$(find coverity_tool -type d -name 'cov-analysis*' | head -n1)
          covPath="$covFolder/bin/cov-build"
          echo "Using Coverity at: $covPath"

          "$covPath" --dir "$COV_DIR" bash scripts/build.windows.release.sh

          if [ ! -f "$COV_DIR/build-log.txt" ]; then
            echo "Error: build-log.txt not found in cov-int!"
            exit 1
          fi
          if [ ! -f "$COV_DIR/output/cli-diagnostics.json" ]; then
            echo "Error: cli-diagnostics.json not found in cov-int/output!"
            exit 1
          fi
          echo "Coverity capture completed successfully"

      - name: Compress Results
        shell: msys2 {0}
        run: |
          tar cjvf myproject.tar.bz2 cov-int

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "coverity-scan-${{ github.run_id }}"
          release_name: "Coverity Scan Results"
          body: "Automated Coverity Scan Results"
          draft: false
          prerelease: false

      - name: Upload Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: myproject.tar.bz2
          asset_name: myproject.tar.bz2
          asset_content_type: application/x-bzip2

      - name: Notify Coverity Scan
        shell: bash
        run: |
          curl -X POST "https://scan.coverity.com/builds" \
            -d "project=${{ github.repository }}" \
            -d "token=${{ secrets.COVERITY_TOKEN }}" \
            -d "email=cpp.benchmark@proton.me" \
            -d "url=https://github.com/${{ github.repository }}/releases/download/coverity-scan-${{ github.run_id }}/myproject.tar.bz2" \
            -d "version=1.0" \
            -d "description=Automated Coverity Scan"
